{"version":3,"sources":["roots/history.js","store/initialState.js","store/reducers/currentCity.js","store/actions/index.js","store/reducers/loadingStatus.js","store/index.js","components/SelectCity/index.js","roots/storeAccess/index.js","components/Loader/index.js","components/WeatherTable/index.js","roots/MainPage/index.js","roots/CityPage/index.js","roots/index.js","components/App/index.js","index.js"],"names":["createBrowserHistory","getCurrentCity","pathname","history","location","slice","countriesTags","London","Odessa","Kiev","Minsk","storeInitialState","currentCity","initialState","currentCityReducer","state","action","type","payload","loadingStatusReducer","combineReducers","loadingStatus","options","value","text","SelectCity","changeCurrentCity","Select","onChange","e","data","push","placeholder","mapStateToProps","mapDispatchToProps","dispatch","Loader","Dimmer","active","inverted","content","Header","Table","Row","HeaderCell","Body","Cell","Content","celled","main","temp","weather","description","wind","speed","ConnectedComponent","connect","props","useState","isLoading","setLoading","setData","useMemo","axios","mainUrl","APIkey","then","response","finally","WeatherTable","countryTag","find","key","to","Button","AppRouter","path","exact","component","MainPage","CityPage","App","store","createStore","rootReducer","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.676bcb2d.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import history from '../roots/history';\r\n\r\n\r\nexport const getCurrentCity = () => {\r\n    const pathname = history.location.pathname;\r\n    return pathname ? pathname.slice(1) : ''\r\n};\r\nexport const loadingStatus = false;\r\nexport const countriesTags = { London: 'uk', Odessa: 'ua', Kiev: 'ua', Minsk: 'by' };\r\n\r\nconst storeInitialState = { currentCity: getCurrentCity() };\r\n\r\nexport default storeInitialState;\r\n","import { CHANGE_CITY } from '../actions';\r\nimport { getCurrentCity } from '../initialState';\r\n\r\nconst initialState = getCurrentCity();\r\n\r\n\r\nconst currentCityReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_CITY: {\r\n            return action.payload;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default currentCityReducer;\r\n\r\n\r\n\r\n","export const CHANGE_CITY = 'CHANGE_CITY';\r\nexport const START_LOADING = 'START_LOADING';\r\nexport const END_LOADING = 'END_LOADING';\r\n","import { START_LOADING, END_LOADING } from '../actions';\r\n\r\nconst initialState = true;\r\n\r\n\r\nconst loadingStatusReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case START_LOADING: {\r\n            return true;\r\n        }\r\n        case END_LOADING: {\r\n            return false;\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default loadingStatusReducer;\r\n\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\n\r\nimport currentCityReducer from './reducers/currentCity';\r\nimport loadingStatusReducer from './reducers/loadingStatus';\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    currentCity: currentCityReducer,\r\n    loadingStatus: loadingStatusReducer\r\n});\r\n","import React from 'react';\r\nimport { Select } from 'semantic-ui-react';\r\n\r\nconst options = [\r\n        {\r\n            value: '/Odessa',\r\n            text: 'Odessa'\r\n        },\r\n        {\r\n            value: '/Kiev',\r\n            text: 'Kiev'\r\n        },\r\n        {\r\n            value:  '/London',\r\n            text: 'London'\r\n        },\r\n        {\r\n            value: '/Minsk',\r\n            text: 'Minsk'\r\n        },\r\n    ]\r\n;\r\n\r\n\r\nconst SelectCity = ({ history, changeCurrentCity }) => (\r\n            <Select onChange={(e, data) => {\r\n                const currentCity = data.value;\r\n                changeCurrentCity(currentCity);\r\n                history.push({ pathname: currentCity } );\r\n            }} placeholder='Select your city' options={options}/>\r\n    );\r\n\r\n\r\nexport default SelectCity;\r\n","import { CHANGE_CITY } from '../../store/actions';\r\n\r\nexport const mapStateToProps = state => ({\r\n    currentCity: state.currentCity\r\n});\r\n\r\nexport const mapDispatchToProps = dispatch => ({\r\n    changeCurrentCity: payload =>  dispatch({\r\n        type: CHANGE_CITY,\r\n        payload\r\n    })\r\n});\r\n","import React from 'react';\r\nimport Dimmer from 'semantic-ui-react/dist/es/modules/Dimmer';\r\nimport SemanticLoader from 'semantic-ui-react/dist/es/elements/Loader';\r\n\r\n\r\nconst Loader = () => (\r\n    <>\r\n        <Dimmer active inverted>\r\n            <SemanticLoader inverted content='Loading' />\r\n        </Dimmer>\r\n    </>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Table from 'semantic-ui-react/dist/es/collections/Table';\r\n\r\nconst { Header, Row, HeaderCell, Body, Cell } = Table;\r\n\r\nconst Content = ({ data }) => (\r\n    <Table celled>\r\n        <Header>\r\n            <Row>\r\n                <HeaderCell>Parameters</HeaderCell>\r\n                <HeaderCell>Value</HeaderCell>\r\n            </Row>\r\n        </Header>\r\n\r\n        <Body>\r\n            <Row>\r\n                <Cell>Temperature</Cell>\r\n                <Cell>{data?.main?.temp}</Cell>\r\n            </Row>\r\n            <Row>\r\n                <Cell>Clouds</Cell>\r\n                <Cell>{data?.weather[0].description}</Cell>\r\n            </Row>\r\n            <Row>\r\n                <Cell>Wind speed</Cell>\r\n                <Cell>{data?.wind?.speed}</Cell>\r\n            </Row>\r\n        </Body>\r\n    </Table>\r\n);\r\n\r\nexport default Content\r\n","import React, {useMemo, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nimport { APIkey, mainUrl }from '../'\r\nimport SelectCity from '../../components/SelectCity';\r\nimport { mapStateToProps, mapDispatchToProps } from '../storeAccess';\r\nimport Loader from '../../components/Loader';\r\nimport WeatherTable from '../../components/WeatherTable';\r\n\r\n\r\nconst MainPage = (props) => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState(null);\r\n    const geoCity = 'Odessa'; //todo: get city and tag by current geo position\r\n    const countryTag = 'ua';\r\n\r\n    useMemo(()=>{\r\n        axios(`${mainUrl}weather?q=${geoCity},${countryTag}&appid=${APIkey}`)\r\n            .then((response)=> {\r\n                setData(response.data)\r\n            })\r\n            .finally(()=>{\r\n                setLoading(false)\r\n            })\r\n    },[]);\r\n    return (\r\n        <>\r\n            <div>\r\n                <SelectCity {...props}/>\r\n            </div>\r\n            <h3>Current city: {geoCity}</h3>\r\n            {\r\n                isLoading\r\n                    ? <Loader/>\r\n                    : <WeatherTable data={data}/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst ConnectedComponent = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainPage);\r\n\r\nexport default ConnectedComponent;\r\n\r\n","import React, {useMemo, useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport find from 'lodash/find';\r\nimport axios from 'axios';\r\nimport Button from 'semantic-ui-react/dist/es/elements/Button';\r\n\r\nimport { APIkey, mainUrl }from '../'\r\nimport { mapStateToProps, mapDispatchToProps } from '../storeAccess';\r\nimport { countriesTags } from '../../store/initialState';\r\nimport Loader from '../../components/Loader';\r\nimport WeatherTable from '../../components/WeatherTable';\r\n\r\n\r\nconst CityPage = (props) => {\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [data, setData] = useState(null)\r\n    const countryTag = find(countriesTags, (value, key) => props.currentCity === key);\r\n\r\n    useMemo(()=>{\r\n        axios(`${mainUrl}weather?q=${props.currentCity},${countryTag}&appid=${APIkey}`)\r\n            .then((response)=> {\r\n                setData(response.data)\r\n            })\r\n            .finally(()=>{\r\n                setLoading(false)\r\n            })\r\n    },[]);\r\n  return (\r\n      <>\r\n          <Link to={'/'}>\r\n            <Button content='Back' />\r\n          </Link>\r\n\r\n          {\r\n            isLoading\r\n                ? <Loader/>\r\n                : <WeatherTable data={data}/>\r\n          }\r\n      </>\r\n  )\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CityPage);\r\n\r\n","import React from 'react';\r\nimport { Router, Route } from 'react-router-dom';\r\n\r\nimport history from './history';\r\nimport MainPage from './MainPage';\r\nimport CityPage from './CityPage';\r\n\r\n\r\nexport const APIkey = '5ce18c55f97b60ff571795ec32faba7c';\r\nexport const mainUrl = 'http://api.openweathermap.org/data/2.5/'\r\n\r\nconst AppRouter = (props) => {\r\n\r\n  return (\r\n\r\n      <Router history={history}>\r\n              <Route path={'/'} exact component={MainPage}/>\r\n              <Route path={'/:cityName'} component={CityPage}/>\r\n      </Router>\r\n\r\n  )\r\n};\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport rootReducer from '../../store';\r\nimport storeInitialState from '../../store/initialState';\r\n\r\n\r\nimport AppRouter from '../../roots';\r\n\r\n\r\nconst App = () => {\r\n    const store = createStore(rootReducer, storeInitialState );\r\n\r\n\r\n    return (\r\n        <>\r\n            <Provider store={store}>\r\n                <AppRouter />\r\n            </Provider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css'\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}